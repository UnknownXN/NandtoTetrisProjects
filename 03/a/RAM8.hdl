// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:

    //Convoluted Solution
    //Or(a=address[0], b=address[1], out=zeroa);
    //Or(a=zeroa, b=address[2], out=zerob);
    //Not(in=zerob, out=zeroNoLoad);
    //And(a=zeroNoLoad, b=load, out=zero);
//
    //Not(in=address[1], out=notOneA);
    //Not(in=address[2], out=notOneB);
    //And(a=notOneA, b=notOneB, out=andOne);
    //And(a=andOne, b=address[0], out=oneNoLoad);
    //And(a=oneNoLoad, b=load, out=one);
//
    //Not(in=address[0], out=notTwoA);
    //Not(in=address[2], out=notTwoB);
    //And(a=notTwoA, b=notTwoB, out=andTwo);
    //And(a=andTwo, b=address[1], out=twoNoLoad);
    //And(a=twoNoLoad, b=load, out=two);
//
    //Not(in=address[2], out=notThreeA);
    //Or(a=notThreeA, b=false, out=orThree);
    //And(a=address[0], b=orThree, out=andThree);
    //And(a=andThree, b=address[1], out=threeNoLoad);
    //And(a=threeNoLoad, b=load, out=three);
//
    //Not(in=address[0], out=notFourA);
    //Not(in=address[1], out=notFourB);
    //And(a=notFourA, b=notFourB, out=andFour);
    //And(a=address[2], b=andFour, out=fourNoLoad);
    //And(a=fourNoLoad, b=load, out=four);
//
    //Not(in=address[1], out=notFive);
    //And(a=address[0], b=notFive, out=fiveAnd);
    //And(a=address[2], b=fiveAnd, out=fiveNoLoad);
    //And(a=fiveNoLoad, b=load, out=five);
//
    //Not(in=address[0], out=notSix);
    //And(a=notSix, b=address[1], out=andSix);
    //And(a=address[2], b=andSix, out=sixNoLoad);
    //And(a=sixNoLoad, b=load, out=six);
//
    //And(a=address[0], b=address[1], out=sevena);
    //And(a=sevena, b=address[2], out=sevenNoLoad);
    //And(a=sevenNoLoad, b=load, out=seven);

    And(a=true, b=load, out=outAnd);
    DMux8Way(in=outAnd, sel=address[0..2], a=zero, b=one, c=two, d=three, e=four, f=five, g=six, h=seven);

    Register(in=in[0..15], load=zero, out=out0);
    Register(in=in[0..15], load=one, out=out1);
    Register(in=in[0..15], load=two, out=out2);
    Register(in=in[0..15], load=three, out=out3);
    Register(in=in[0..15], load=four, out=out4);
    Register(in=in[0..15], load=five, out=out5);
    Register(in=in[0..15], load=six, out=out6);
    Register(in=in[0..15], load=seven, out=out7);

    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7,sel=address[0..2], out=out[0..15]);
}